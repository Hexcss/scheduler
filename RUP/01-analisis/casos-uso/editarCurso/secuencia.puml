@startuml editarCurso-analisis-secuencia

skinparam linetype polyline

' Actores externos
actor ":Cursos Abierto" as CursosAbierto
actor ":Curso Abierto" as CursoAbierto
participant ":Collaboration CrearCurso" as CrearCurso
participant ":Collaboration AbrirCursos" as AbrirCursos

' Clases de análisis - Vista (Boundary)
boundary "EditarCursoView" as Vista <<boundary>>

' Clases de análisis - Control  
control "CursoController" as Controlador <<control>>

' Clases de análisis - Entidad (Entity)
entity "CursoRepository" as Repositorio <<entity>>
entity "Curso" as CursoEntity <<entity>>

title Análisis de Colaboración: editarCurso()

== Flujo Principal: Editar Curso Académico ==

note over CursosAbierto, CrearCurso
**Múltiples puntos de entrada:**
• Desde lista de cursos (edición directa)
• Desde creación de curso (C→U automático)
• Desde detalle de curso (continuar edición)
end note

alt Entrada desde lista
    CursosAbierto -> Vista : 1a: editarCurso(cursoId)
else Entrada desde creación (C→U)
    CrearCurso -> Vista : 1b: editarCurso(cursoNuevo)
else Entrada desde detalle
    CursoAbierto -> Vista : 1c: editarCurso(cursoId)
end

activate Vista

Vista -> Controlador : 2: cargarCursoParaEdición(cursoId)
activate Controlador

Controlador -> Repositorio : 3: obtenerPorId(cursoId)
activate Repositorio
Repositorio --> Controlador : 4: curso : Curso
deactivate Repositorio

Controlador --> Vista : 5: datosCurso : Curso
deactivate Controlador

Vista -> Vista : 6: presenta datos de edición
note right
**Sistema presenta datos de edición**
• Código, nombre, descripción del curso
• Créditos, horas teóricas, horas prácticas
• Programa académico asociado

**Sistema permite solicitar:**
• modificar campos
• guardar curso
• cancelar edición
end note

== Ciclo de Edición Continua ==

loop Edición continua
    Vista -> Controlador : 7: modificarCampos(cursoId, cambios)
    activate Controlador
    
    Controlador -> CursoEntity : 8: aplicarCambios(cambios)
    activate CursoEntity
    note right
    **Modificaciones académicas:**
    • Validar coherencia de créditos/horas
    • Verificar restricciones curriculares
    • Mantener integridad de datos
    end note
    
    CursoEntity --> Controlador : 9: cursoModificado : Curso
    deactivate CursoEntity
    
    Controlador -> Repositorio : 10: actualizar(cursoModificado)
    activate Repositorio
    Repositorio --> Controlador : 11: éxito : boolean
    deactivate Repositorio
    
    Controlador --> Vista : 12: cambiosAplicados : boolean
    deactivate Controlador
    
    alt Continuar editando
        Vista -> Vista : 13: mantiene edición activa
        note right
        **Administrador solicita modificar campos**
        • Sesión de edición continua
        • Sin perder cambios realizados
        • Permite modificaciones adicionales
        end note
    end
end

== Finalización de Edición ==

alt Guardar y salir
    Vista -> AbrirCursos : 14a: <<include>> abrirCursos()
    note right
    **Administrador solicita guardar y salir**
    • Cambios persistidos
    • Regresa a lista actualizada
    end note
else Cancelar edición
    Vista -> AbrirCursos : 14b: <<include>> abrirCursos()
    note right
    **Administrador solicita cancelar edición**
    • Cambios pueden perderse
    • Regresa a lista sin modificaciones
    end note
end

deactivate Vista

@enduml