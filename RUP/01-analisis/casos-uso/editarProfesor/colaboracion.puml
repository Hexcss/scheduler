@startuml editarProfesor-analisis
!theme plain
allow_mixing

package "View" {
  object "profesorEdicionView : ProfesorEdicionView" as view
}

package "Controller" {
  object "profesorController : ProfesorController" as controller
}

package "Model" {
  object "profesor : Profesor" as profesor
  object "profesorRepository : ProfesorRepository" as repository
}

actor "Administrador" as admin

admin -> view : 1: solicitarEditarProfesor(id)
view -> controller : 2: cargarProfesor(id)
controller -> repository : 3: obtenerProfesor(id)
repository -> controller : 4: profesorCargado(datos)
controller -> view : 5: presentarDatosEdicion(datos)
view -> admin : 6: mostrarDatosCompletos()
admin -> view : 7: modificarDatos(cambios)
view -> controller : 8: procesarModificaciones(cambios)
controller -> profesor : 9: validarCambios(cambios)
profesor -> controller : 10: cambiosValidos()
controller -> repository : 11: actualizarProfesor(profesor)
repository -> controller : 12: profesorActualizado()
controller -> view : 13: confirmarGuardado()
view -> admin : 14: mostrarConfirmacion()
view -> admin : 15: mantenerEdicionContinua()

note top of view
  <b>Vista:</b>
  Presenta interfaz completa
  para edición con todos los
  campos del profesor
end note

note top of controller
  <b>Controlador:</b>
  Coordina carga, edición
  y mantiene estado para
  edición continua
end note

note top of profesor
  <b>Entidad:</b>
  Aplica reglas de negocio
  y mantiene integridad
  durante actualizaciones
end note

note top of repository
  <b>Repositorio:</b>
  Carga y actualiza profesor
  manteniendo consistencia
  transaccional
end note

@enduml
